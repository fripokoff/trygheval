{
    "success": true,
    "data": [
        {
			"id": 10,
			"status": "active",
			"project_title": "minitalk",
			"introduction": [
				"- Remain polite, courteous, respectful, and constructive throughout the evaluation process. The community's well-being depends on it.",
				"- Work with the student or group being evaluated to identify potential issues in their project. Take time to discuss and debate the problems identified.",
				"- Understand that there may be differences in how peers interpret the project instructions and scope. Always keep an open mind and grade as honestly as possible. Pedagogy is effective only when peer evaluations are taken seriously."
			],
			"guidelines": [
				"- Only grade the work submitted to the **Git repository** of the evaluated student or group.",
				"- Double-check that the **Git repository** belongs to the student(s) and that the project is the one expected. Ensure that **git clone** is used in an empty folder.",
				"- Carefully verify that no malicious aliases are used to deceive the evaluator into grading non-official content.",
				"- If applicable, review any **scripts** used for testing or automation together with the student.",
				"- If you haven’t completed the assignment you’re evaluating, read the entire subject before starting the evaluation.",
				"- Use the available flags to report an empty repository, a non-functioning program, a **Norm** error, or cheating. The evaluation process ends with a final grade of 0 (or -42 for cheating). However, except in cases of cheating, students are encouraged to review the work together to identify mistakes to avoid in the future.",
				"- Remember that no **segfaults** or other unexpected program terminations will be tolerated during the evaluation. If this occurs, the final grade is 0. Use the appropriate flag.",
				"- You should not need to edit any files except the configuration file, if it exists. If editing a file is necessary, explain the reasons to the evaluated student and ensure mutual agreement.",
				"- Verify the absence of **memory leaks.** All memory allocated on the heap must be properly freed before the program ends.",
				"- You may use tools like leaks, **valgrind,** or **e_fence** to check for memory leaks. If memory leaks are found, tick the appropriate flag."
			],
			"attachments": [
				{
					"title": "subject_en.pdf",
					"url": "https://github.com/ARuzgar/42-Subjects/blob/main/Cursus/minitalk/en.subject.pdf"
				},
				{
					"title": "subject_fr.pdf",
					"url": "https://github.com/ARuzgar/42-Subjects/blob/main/Cursus/minitalk/fr.subject.pdf"
				}
			],
			"cursus_id": "1",
			"updated_at": "2023-08-01T16:28:15.940Z",
			"students" : 1,
			"eval_points" : 3,
			"time" : 30,
			
			"preliminarySections" : [
				{
					"id": "679e597c8c78a1cea9234fbe",
					"description": "--Defense can only happen if the evaluated student or group is present. This way everybody learns by sharing knowledge.\n--If no work has been submitted (or wrong files, wrong directory, or wrong filenames), the grade is 0, and the evaluation process ends.\n--No empty repository (= nothing in Git repository).\n--No Norm error.\n--Cheating (= -42).\n--No compilation error. Also, the Makefile must not re-link.",
					"yes_no": true,
					"sheetId": "679e597c8c78a1cea9234fbd",
					"created_at": "2025-02-01T17:27:24.804Z",
					"updated_at": "2025-02-01T17:27:24.804Z"
				},
				{
					"id": "679e597c8c78a1cea9234fbf",
					"description": "--The Makefile compiles both executables -> 1 point\n--The server name is 'server' and it prints his PID at launch -> 2 points\n--The client name is 'client' and is run as follows: '../../client PID_SERVER STRING_TO_PASS' -> 2 points",
					"yes_no": false,
					"sheetId": "679e597c8c78a1cea9234fbd",
					"created_at": "2025-02-01T17:27:24.804Z",
					"updated_at": "2025-02-01T17:27:24.804Z"
				}
			],
			"mandatorySections" : [
				{
					"id": "679e597c8c78a1cea9234fc0",
					"description": "It's possible to pass on a message of any size.\nReceived messages must be displayed by the server, and must be obviously\ncorrects!\nThe server should never get stuck or print wrong characters.",
					"yes_no": true,
					"sheetId": "679e597c8c78a1cea9234fbd",
					"created_at": "2025-02-01T17:27:24.804Z",
					"updated_at": "2025-02-01T17:27:24.804Z"
				},
				{
					"id": "679e597c8c78a1cea9234fc1",
					"description": "--The server can receive multiple strings without needing to be restarted. -> 1 point\n--Only one global variable per program is allowed, or no global. Ask for explanations. -> 1 point\n--The communication is done only using the signals SIGUSR1 and SIGUSR2. -> 3 points",
					"yes_no": false,
					"sheetId": "679e597c8c78a1cea9234fbd",
					"created_at": "2025-02-01T17:27:24.804Z",
					"updated_at": "2025-02-01T17:27:24.804Z"
				}
			],
			"bonusSections" : [
				{
					"id": "679e597c8c78a1cea9234fc3",
					"description": "Unicode characters are supported both by the client and the server.",
					"yes_no": true,
					"sheetId": "679e597c8c78a1cea9234fbd",
					"created_at": "2025-02-01T17:27:24.874Z",
					"updated_at": "2025-02-01T17:27:24.874Z"
				},
				{
					"id": "679e597c8c78a1cea9234fc4",
					"description": "The server acknowledges every message received by sending back a signal\nto the client.",
					"yes_no": true,
					"sheetId": "679e597c8c78a1cea9234fbd",
					"created_at": "2025-02-01T17:27:24.874Z",
					"updated_at": "2025-02-01T17:27:24.874Z"
				}
			],
			"gradingOptions" :[
				{
					"id": "679e45788c78a1cea9234f62",
					"ok": true,
					"outstanding": true,
					"empty_work": true,
					"incomplete_work": true,
					"invalid_compilation": true,
					"norme": true,
					"cheat": true,
					"crash": true,
					"concerning_situations": true,
					"leaks": true,
					"forbidden_functions": true,
					"cannot_support": true,
					"sheetId": "679e45778c78a1cea9234f5f",
					"created_at": "2025-02-01T16:02:00.638Z",
					"updated_at": "2025-02-01T16:05:07.468Z"
				}
			]
        }
    ],
    "message": "Sheets found successfully"
}