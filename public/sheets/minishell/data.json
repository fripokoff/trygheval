{
    "success": true,
    "data": [
        {
			"id": 11,
			"status": "active",
			"project_title": "minishell",
			"introduction": [
				"- Remain polite, courteous, respectful, and constructive throughout the evaluation process. The community's well-being depends on it.",
				"- Work with the student or group being evaluated to identify potential issues in their project. Take time to discuss and debate the problems identified.",
				"- Understand that there may be differences in how peers interpret the project instructions and scope. Always keep an open mind and grade as honestly as possible. Pedagogy is effective only when peer evaluations are taken seriously."
			],
			"guidelines": [
				"- Only grade the work submitted to the **Git repository** of the evaluated student or group.",
				"- Double-check that the **Git repository** belongs to the student(s) and that the project is the one expected. Ensure that **git clone** is used in an empty folder.",
				"- Carefully verify that no malicious aliases are used to deceive the evaluator into grading non-official content.",
				"- If applicable, review any **scripts** used for testing or automation together with the student.",
				"- If you haven’t completed the assignment you’re evaluating, read the entire subject before starting the evaluation.",
				"- Use the available flags to report an empty repository, a non-functioning program, a **Norm** error, or cheating. The evaluation process ends with a final grade of 0 (or -42 for cheating). However, except in cases of cheating, students are encouraged to review the work together to identify mistakes to avoid in the future.",
				"- Remember that no **segfaults** or other unexpected program terminations will be tolerated during the evaluation. If this occurs, the final grade is 0. Use the appropriate flag.",
				"- You should not need to edit any files except the configuration file, if it exists. If editing a file is necessary, explain the reasons to the evaluated student and ensure mutual agreement.",
				"- Verify the absence of **memory leaks.** All memory allocated on the heap must be properly freed before the program ends.",
				"- You may use tools like leaks, **valgrind,** or **e_fence** to check for memory leaks. If memory leaks are found, tick the appropriate flag."
			],
			"attachments": [
				{
					"title": "subject_en.pdf",
					"url": "en.subject.pdf"
				},
				{
					"title": "subject_fr.pdf",
					"url": "fr.subject.pdf"
				}
			],
			"cursus_id": "1",
			"updated_at": "2023-08-01T16:28:15.940Z",
			"students" : 2,
			"eval_points" : 6,
			"time" : 60,
			"mandatorySections" : [
				{
					"id": "679e5b0b8c78a1cea9234fc6",
					"description": "--Use \"make -n\" to see if compilation use \"-Wall -Wextra -Werror\". If not, select the \"invalid compilation\" flag.\n--minishell compiles without any errors. If not, select the flag.\n--The Makefile must not re-link. If not, select the flag.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fc7",
					"description": "--Execute a simple command with an absolute path like /bin/ls, or any other command without any options.\n--How many global variables are used? Why? Ask the evaluated student to give you a concrete example of why it feels mandatory or logical.\n--Check the global variable. This global variable cannot provide any other information or data access than the number of a received signal.\n--Test an empty command.\n--Test only spaces or tabs.\n--If something crashes, select the \"crash\" flag.\n--If something doesn't work, select the \"incomplete work\" flag.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fc8",
					"description": "--Execute a simple command with an absolute path like /bin/ls, or any other command with arguments but without any quotes or double quotes.\n--Repeat multiple times with different commands and arguments.\n--If something crashes, select the \"crash\" flag.\n--If something doesn't work, select the \"incomplete work\" flag.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fc9",
					"description": "--Execute the echo command with or without arguments, or the -n option.\n--Repeat multiple times with different arguments.\n--If something crashes, select the \"crash\" flag.\n--If something doesn't work, select the \"incomplete work\" flag.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fca",
					"description": "--Execute exit command with or without arguments.\n--Repeat multiple times with different arguments.\n--Don't forget to relaunch the minishell\n--If something crashes, select the \"crash\" flag.\n--If something doesn't work, select the \"incomplete work\" flag.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fcb",
					"description": "--Execute a simple command with an absolute path like /bin/ls, or any other command with arguments but without any quotes and double quotes. Then execute echo $?\n--Check the printed value. You can do the same in bash in order to compare the results.\n--Repeat multiple times with different commands and arguments. Try some wrong commands like '/bin/ls filethatdoesntexist'\n--Try anything like expr $? + $?\n--If something crashes, select the \"crash\" flag.\n--If something doesn't work, select the \"incomplete work\" flag.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fcc",
					"description": "--ctrl-C in an empty prompt should display a new line with a new prompt.\n--ctrl-\\ in an empty prompt should not do anything.\n--ctrl-D in an empty prompt should quit minishell --> RELAUNCH!\n--ctrl-C in a prompt after you wrote some stuff should display a new line with a new prompt.\n--The buffer should be clean too. Press \"Enter\" to make sure nothing from the previous line is executed.\n--ctrl-D in a prompt after you wrote some stuff should not do anything.\n--ctrl-\\ in a prompt after you wrote some stuff should not do anything.\n--Try ctrl-C after running a blocking command like cat without arguments or grep “something“.\n--Try ctrl-\\ after running a blocking command like cat without arguments or grep “something“.\n--Try ctrl-D after running a blocking command like cat without arguments or grep “something“.\n--Repeat multiple times using different commands.\n--If something crashes, select the \"crash\" flag.\n--If something doesn't work, select the \"incomplete work\" flag.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fcd",
					"description": "--Execute a simple command with arguments and, this time, use also double quotes (you should try to include whitespaces too).\n--Try a command like : echo \"cat lol.c | cat > lol.c\"\n--Try anything except $.\n--If something crashes, select the \"crash\" flag.\n--If something doesn't work, select the \"incomplete work\" flag.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fce",
					"description": "--Execute commands with single quotes as arguments.\n--Try empty arguments.\n--Try environment variables, whitespaces, pipes, redirection in the single quotes.\n--echo '$USER' must print \"$USER\".\n--Nothing should be interpreted.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fcf",
					"description": "Check if env shows you the current environment variables.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fd0",
					"description": "--Export environment variables, create new ones and replace old ones.\n--Check the result with env.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fd1",
					"description": "--Export environment variables, create new ones and replace old ones.\n--Use unset to remove some of them.\n--Check the result with env.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fd2",
					"description": "--Use the command cd to move the working directory and check if you are in the right directory with /bin/ls\n--Repeat multiple times with working and not working cd\n--Also, try '.' and '..' as arguments.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fd3",
					"description": "--Use the command pwd.\n--Repeat multiple times in different directories.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fd4",
					"description": "--Execute commands but this time use a relative path.\n--Repeat multiple times in different directories with a complex relative path (lots of ..).",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fd5",
					"description": "--Execute commands but this time without any path (ls, wc, awk and so forth).\n--Unset the $PATH and ensure commands are not working anymore.\n--Set the $PATH to a multiple directory value (directory1:directory2) and ensure that directories are checked in order from left to right.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fd6",
					"description": "--Execute commands with redirections < and/or >\n--Repeat multiple times with different commands and arguments and sometimes change > with >>\n--Check if multiple tries of the same redirections fail.\n--Test << redirection (it doesn't have to update the history).",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fd7",
					"description": "--Execute commands with pipes like 'cat file | grep bla | more'\n--Repeat multiple times with different commands and arguments.\n--Try some wrong commands like 'ls filethatdoesntexist | grep bla | more'\n--Try to mix pipes and redirections.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fd8",
					"description": "--Type a command line, then use ctrl-C and press \"Enter\". The buffer should be clean and there should be nothing left to execute.\n--Can we navigate through history using Up and Down? Can we retry some command?\n--Execute commands that should not work like 'dsbksdgbksdghsd'. Ensure minishell doesn't crash and prints an error. 'cat | cat | ls' should behave in a \"normal way\".\n--Try to execute a long command with a ton of arguments.\n--Have fun with that beautiful minishell and enjoy it!",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fd9",
					"description": "--Execute echo with some environment variables ($variable) as arguments.\n--Check that $ is interpreted as an environment variable.\n--Check that double quotes interpolate $.\n--Check that USER exists. Otherwise, set it.\n--echo \"$USER\" should print the value of the USER variable.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.232Z",
					"updated_at": "2025-02-01T17:34:03.232Z"
				}
			],
			"bonusSections" : [
				{
					"id": "679e5b0b8c78a1cea9234fdb",
					"description": "Use &&, || and parenthesis with commands and ensure minishell behaves the same way bash does.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.323Z",
					"updated_at": "2025-02-01T17:34:03.323Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fdc",
					"description": "Use wildcards in arguments in the current working directory.",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.323Z",
					"updated_at": "2025-02-01T17:34:03.323Z"
				},
				{
					"id": "679e5b0b8c78a1cea9234fdd",
					"description": "--Set the USER environment variable.\n--echo \"'$USER'\" should print the value of the USER variable.\n--echo '\"$USER\"' should print \"$USER\".",
					"yes_no": true,
					"sheetId": "679e5b0b8c78a1cea9234fc5",
					"created_at": "2025-02-01T17:34:03.323Z",
					"updated_at": "2025-02-01T17:34:03.323Z"
				}
			],
			"gradingOptions" :[
				{
					"id": "679e45788c78a1cea9234f62",
					"ok": true,
					"outstanding": true,
					"empty_work": true,
					"incomplete_work": true,
					"invalid_compilation": true,
					"norme": true,
					"cheat": true,
					"crash": true,
					"concerning_situations": true,
					"leaks": true,
					"forbidden_functions": true,
					"cannot_support": true,
					"sheetId": "679e45778c78a1cea9234f5f",
					"created_at": "2025-02-01T16:02:00.638Z",
					"updated_at": "2025-02-01T16:05:07.468Z"
				}
			]
        }
    ],
    "message": "Sheets found successfully"
}