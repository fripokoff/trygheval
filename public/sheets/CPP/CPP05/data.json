{
  "success": true,
  "data": [
    {
      "project_title": "CPP05",
      "students": 1,
      "status": "active",
      "finish": true,
      "eval_points": 3,
      "time": 30,
      "id": 14,
      "introduction": {
        "EN": "# Introduction\n- Remain polite, courteous, respectful and constructive throughout the evaluation process. The well-being of the community depends on it.\n- Identify with the student or group whose work is evaluated the possible dysfunctions in their project. Take the time to discuss and debate the problems that may have been identified.\n- You must consider that there might be some differences in how your peers might have understood the project's instructions and the scope of its functionalities. Always keep an open mind and grade them as honestly as possible. The pedagogy is useful only and only if the peer-evaluation is done seriously.",
        "FR": "# Introduction\n- Restez poli, courtois, respectueux et constructif tout au long du processus d'évaluation. Le bien-être de la communauté en dépend.\n- Identifiez avec l'étudiant ou le groupe dont le travail est évalué les dysfonctionnements possibles dans leur projet. Prenez le temps de discuter et de débattre des problèmes qui ont pu être identifiés.\n- Vous devez considérer qu'il peut y avoir des différences dans la façon dont vos pairs ont compris les instructions du projet et la portée de ses fonctionnalités. Gardez toujours l'esprit ouvert et notez-les aussi honnêtement que possible. La pédagogie n'est utile que si l'évaluation par les pairs est faite sérieusement."
      },
      "guidelines": {
        "EN": "# Guidelines\n- Only grade the work that was turned in the Git repository of the evaluated student or group.\n- Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.\n- Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.\n- To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).\n- If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.\n- Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.\n- You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.\n- You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag.",
        "FR": "# Directives\n- Ne notez que le travail qui a été remis dans le dépôt Git de l'étudiant ou du groupe évalué.\n- Vérifiez que le dépôt Git appartient bien à l'étudiant (aux étudiants). Assurez-vous que le projet est bien celui attendu. Vérifiez également que 'git clone' est utilisé dans un dossier vide.\n- Vérifiez attentivement qu'aucun alias malveillant n'a été utilisé pour vous tromper et vous faire évaluer quelque chose qui n'est pas le contenu du dépôt officiel.\n- Pour éviter toute surprise et le cas échéant, examinez ensemble tous les scripts utilisés pour faciliter la notation (scripts de test ou d'automatisation).\n- Si vous n'avez pas terminé le devoir que vous allez évaluer, vous devez lire l'intégralité du sujet avant de commencer le processus d'évaluation.\n- Utilisez les drapeaux disponibles pour signaler un dépôt vide, un programme non fonctionnel, une erreur de Norme, une tricherie, etc. Dans ces cas, le processus d'évaluation se termine et la note finale est de 0, ou -42 en cas de tricherie. Cependant, à l'exception de la tricherie, les étudiants sont fortement encouragés à examiner ensemble le travail qui a été remis, afin d'identifier les erreurs qui ne devraient pas être répétées à l'avenir.\n- Vous ne devriez jamais avoir à modifier un fichier, sauf le fichier de configuration s'il existe. Si vous voulez modifier un fichier, prenez le temps d'expliquer les raisons à l'étudiant évalué et assurez-vous que vous êtes tous les deux d'accord.\n- Vous devez également vérifier l'absence de fuites de mémoire. Toute mémoire allouée sur le tas doit être correctement libérée avant la fin de l'exécution. Vous êtes autorisé à utiliser n'importe quel outil disponible sur l'ordinateur, tel que leaks, valgrind ou e_fence. En cas de fuites de mémoire, cochez le drapeau approprié."
      },
      "attachments": [
        {
          "title": "subject_en.pdf",
          "url": "en.subject.pdf"
        },
        {
          "title": "subject_fr.pdf",
          "url": "fr.subject.pdf"
        },
        {
          "title": "extras",
          "url": "/Extras"
        }
      ],
      "mandatorySections": [
        {
          "description": {
            "EN": "# Preliminary tests\n*If a cheating case is suspected, the grading and evaluation end immediately. To report it, select the \"Cheat\" flag. Be careful to use it calmly, carefully, and with discernment.*\n\n---\n\n**Prerequisites**\nThe code must compile with c++ and the flags -Wall -Wextra -Werror.\nAs a reminder, this project must follow the C++98 standard. Therefore, C++11 functions (or other standards) and containers are NOT expected.\n\nDo not grade the exercise if you find:\n- A function implemented in a header file (except for template functions).\n- A Makefile compiling without the requested flags and/or with something other than c++.\n\nSelect the \"Forbidden Function\" flag if you encounter:\n- The use of a \"C\" function (*alloc, *printf, free).\n- The use of a forbidden function in the project.\n- The use of \"using namespace <ns_name>\" or the keyword \"friend\".\n- The use of an external library, or features specific to versions later than C++98.",
            "FR": "# Tests préliminaires\n*Si un cas de triche est suspecté, la notation et l'évaluation se terminent immédiatement. Pour le signaler, sélectionnez le drapeau \"Cheat\". Soyez prudent dans son utilisation, faites-le calmement, avec soin et discernement.*\n\n---\n\n**Prérequis**\nLe code doit compiler avec c++ et les flags -Wall -Wextra -Werror.\nPour rappel, ce projet doit suivre la norme C++98. Par conséquent, les fonctions C++11 (ou autres normes) et les conteneurs ne sont PAS attendus.\n\nNe notez pas l'exercice si vous trouvez :\n- Une fonction implémentée dans un fichier d'en-tête (sauf pour les fonctions de modèle).\n- Un Makefile compilant sans les flags demandés et/ou avec autre chose que c++.\n\nSélectionnez le drapeau \"Fonction interdite\" si vous rencontrez :\n- L'utilisation d'une fonction \"C\" (*alloc, *printf, free).\n- L'utilisation d'une fonction interdite dans le projet.\n- L'utilisation de \"using namespace <ns_name>\" ou du mot-clé \"friend\".\n- L'utilisation d'une bibliothèque externe, ou de fonctionnalités spécifiques aux versions postérieures à C++98."
          },
          "yes_no": true,
          "separator": "border-t-4",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "# Ex00: Mommy, when I grow up, I want to be a bureaucrat!\n*As usual, there has to be the main function that contains enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.*\n\n---\n\n**Bureaucrat**\nThere is a Makefile that compiles using the appropriate flags.\nThere is a Bureaucrat class. It has a constant name\nIt has a grade that ranges from 1 (highest) to 150 (lowest).\nExceptions are thrown when trying to create a Bureaucrat with a grade that is too high or too low.\nThere are accessors for the attributes\nThere are functions to increment / decrement the grade,\nThey throw exceptions when it's appropriate. Remember that incrementing a grade 3 will give you a grade 2 (1 is the highest).\nThe exceptions that are used inherit from std::exception, or from something derived from std::exception (i.e. they are catchable as std::exception & e).\nThere is a << operator to ostream overload that outputs the info of the Bureaucrat.",
            "FR": "# Ex00 : Maman, quand je serai grand, je veux être un bureaucrate !\n*Comme d'habitude, il doit y avoir la fonction main qui contient suffisamment de tests pour prouver que le programme fonctionne comme prévu. S'il n'y en a pas, ne notez pas cet exercice. Si une classe non-interface n'est pas sous forme canonique orthodoxe, ne notez pas cet exercice.*\n\n---\n\n**Bureaucrate**\nIl y a un Makefile qui compile en utilisant les flags appropriés.\nIl y a une classe Bureaucrat. Elle a un nom constant.\nElle a un grade qui varie de 1 (le plus élevé) à 150 (le plus bas).\nDes exceptions sont levées lorsque l'on essaie de créer un Bureaucrate avec un grade trop élevé ou trop bas.\nIl existe des accesseurs pour les attributs.\nIl existe des fonctions pour incrémenter/décrémenter le grade.\nElles lèvent des exceptions lorsque c'est approprié. N'oubliez pas qu'incrémenter un grade 3 vous donnera un grade 2 (1 est le plus élevé).\nLes exceptions utilisées héritent de std::exception, ou de quelque chose dérivé de std::exception (c'est-à-dire qu'elles sont catchables en tant que std::exception & e).\nIl existe un opérateur << de surcharge ostream qui affiche les informations du Bureaucrate."
          },
            "yes_no": true,
          "separator": "border-t-4",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "# Ex01: Form up, maggots!\n*As usual, there has to be the main function that contains enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.*\n\n---\n\n**Form**\nThere is a Makefile that compiles using the appropriate flags.\nThere is a Form class. It has a name, a bool that indicates whether is it signed (at the beginning it's not), a grade required to sign it, and a grade required to execute it.\nThe names and grades are constant. All these attributes are private and not protected.\nThe grades of the forms follow the same constraints as the Bureaucrat's (exceptions, 1 = highest 150 = lowest, and so forth). There are accessors for the attributes and a << operator to ostream overload that displays the complete state of the Form. There is a Form::beSigned() member function that works as described by the subject.\nThere is a Bureaucrat::signForm() function that works as described by the subject.",
            "FR": "# Ex01 : Formez les rangs, asticots !\n*Comme d'habitude, il doit y avoir la fonction main qui contient suffisamment de tests pour prouver que le programme fonctionne comme prévu. S'il n'y en a pas, ne notez pas cet exercice. Si une classe non-interface n'est pas sous forme canonique orthodoxe, ne notez pas cet exercice.*\n\n---\n\n**Formulaire**\nIl y a un Makefile qui compile en utilisant les flags appropriés.\nIl y a une classe Form. Elle a un nom, un booléen qui indique si elle est signée (au début elle ne l'est pas), un grade requis pour la signer, et un grade requis pour l'exécuter.\nLes noms et les grades sont constants. Tous ces attributs sont privés et non protégés.\nLes grades des formulaires suivent les mêmes contraintes que ceux du Bureaucrate (exceptions, 1 = le plus élevé, 150 = le plus bas, etc.). Il existe des accesseurs pour les attributs et un opérateur << de surcharge ostream qui affiche l'état complet du Formulaire. Il existe une fonction membre Form::beSigned() qui fonctionne comme décrit par le sujet.\nIl existe une fonction Bureaucrat::signForm() qui fonctionne comme décrit par le sujet."
          },
          "yes_no": true,
          "separator": "border-t-4",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "# Ex02: No, you need form 28B, not 28C...\n*As usual, there has to be the main function that contains enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.*\n\n---\n\n**Forms that actually do something**\nThere is a Makefile that compiles using the appropriate flags\nThere are concrete forms that are conform to the specifications of the subject (required grades, names and actions).\nThey take only one parameter in their constructor, which is their target.\nThere is a Form::execute(Bureaucrat const & executor) method that works as specified by the subject.\nEither this method is pure and the grade checks are implemented in each subclass, or this method performs the checks, then calls another method in derived class that only executes the action.\nBoth of these techniques are valid.\nThere is a Bureaucrat::executeForm(Form const & form) that works as specified by the subject.",
            "FR": "# Ex02 : Non, il vous faut le formulaire 28B, pas le 28C...\n*Comme d'habitude, il doit y avoir la fonction main qui contient suffisamment de tests pour prouver que le programme fonctionne comme prévu. S'il n'y en a pas, ne notez pas cet exercice. Si une classe non-interface n'est pas sous forme canonique orthodoxe, ne notez pas cet exercice.*\n\n---\n\n**Formulaires qui font réellement quelque chose**\nIl y a un Makefile qui compile en utilisant les flags appropriés.\nIl existe des formulaires concrets qui sont conformes aux spécifications du sujet (grades, noms et actions requis).\nIls ne prennent qu'un seul paramètre dans leur constructeur, qui est leur cible.\nIl existe une méthode Form::execute(Bureaucrat const & executor) qui fonctionne comme spécifié par le sujet.\nSoit cette méthode est pure et les vérifications de grade sont implémentées dans chaque sous-classe, soit cette méthode effectue les vérifications, puis appelle une autre méthode dans la classe dérivée qui exécute uniquement l'action.\nCes deux techniques sont valables.\nIl existe une méthode Bureaucrat::executeForm(Form const & form) qui fonctionne comme spécifié par le sujet."
          },
          "yes_no": true,
          "separator": "border-t-4",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "# Ex03: At least this beats coffee-making\n*As usual, there has to be the main function that contains enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.*\n\n---\n\n**Intern**\nThere is a Makefile that compiles using the appropriate flags.\nThere is an Intern class\nIt has a makeForm() function that works as specified by the subject.",
            "FR": "# Ex03 : Au moins, c'est mieux que de faire le café\n*Comme d'habitude, il doit y avoir la fonction main qui contient suffisamment de tests pour prouver que le programme fonctionne comme prévu. S'il n'y en a pas, ne notez pas cet exercice. Si une classe non-interface n'est pas sous forme canonique orthodoxe, ne notez pas cet exercice.*\n\n---\n\n**Stagiaire**\nIl y a un Makefile qui compile en utilisant les flags appropriés.\nIl existe une classe Intern.\nElle possède une fonction makeForm() qui fonctionne comme spécifié par le sujet."
          },
          "yes_no": true,
          "separator": "border-t-[0.5px]",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "**Good dispatching**\nThe makeForm() function should use some kind of array of pointers to member functions to handle the creation of Forms.\nIf it's using an unclean method, like if/elseif/elseif/else branchings, or some other ugly stuff like this, please count this as wrong.",
            "FR": "**Bonne répartition**\nLa fonction makeForm() doit utiliser une sorte de tableau de pointeurs vers des fonctions membres pour gérer la création de Formulaires.\nSi elle utilise une méthode non propre, comme des branchements if/elseif/elseif/else, ou d'autres choses laides de ce genre, veuillez considérer cela comme faux."
          },
          "yes_no": true,
          "separator": false,
          "type": "mandatory"
        }
      ],
      "bonusSections": [],
      "cursus_id": "1",
      "updated_at": "2023-12-27T23:00:00.000Z",
      "gradingOptions": [
        {
          "ok": true,
          "outstanding": true,
          "empty_work": true,
          "incomplete_work": true,
          "invalid_compilation": true,
          "norme": true,
          "cheat": true,
          "crash": true,
          "concerning_situations": true,
          "leaks": true,
          "forbidden_functions": true,
          "cannot_support": false
        }
      ],
      "languages": [
        "EN",
        "FR"
      ],
      "language": "EN"
    }
  ],
  "message": "Sheet created successfully"
}