{
  "success": true,
  "data": [
    {
      "id": 12,
      "status": "active",
      "finish": true,
      "project_title": "Philosophers",
      "introduction": {
        "EN": "# Introduction\n- Remain polite, courteous, respectful, and constructive throughout the evaluation process. The community's well-being depends on it.  \n- Work with the student or group being evaluated to identify potential issues in their project. Take time to discuss and debate the problems identified.  \n- Understand that there may be differences in how peers interpret the project instructions and scope. Always keep an open mind and grade as honestly as possible. Pedagogy is effective only when peer evaluations are taken seriously.",
        "FR": "# Introduction\n- Restez poli, courtois, respectueux et constructif tout au long du processus d'évaluation. Le bien-être de la communauté en dépend.\n- Travaillez avec l'étudiant ou le groupe évalué pour identifier les problèmes potentiels dans leur projet. Prenez le temps de discuter et de débattre des problèmes identifiés.\n- Comprenez qu'il peut y avoir des différences dans la façon dont les pairs interprètent les instructions et la portée du projet. Gardez toujours l'esprit ouvert et évaluez aussi honnêtement que possible. La pédagogie n'est efficace que lorsque les évaluations par les pairs sont prises au sérieux."
      },
      "guidelines": {
        "EN": "# Guidelines\n- Only grade the work submitted to the **Git repository** of the evaluated student or group.  \n- Double-check that the **Git repository** belongs to the student(s) and that the project is the one expected. Ensure that **git clone** is used in an empty folder.  \n- Carefully verify that no malicious aliases are used to deceive the evaluator into grading non-official content.  \n- If applicable, review any **scripts** used for testing or automation together with the student.  \n- If you haven’t completed the assignment you’re evaluating, read the entire subject before starting the evaluation.  \n- Use the available flags to report an empty repository, a non-functioning program, a **Norm** error, or cheating. The evaluation process ends with a final grade of 0 (or -42 for cheating). However, except in cases of cheating, students are encouraged to review the work together to identify mistakes to avoid in the future.  \n- Remember that no **segfaults** or other unexpected program terminations will be tolerated during the evaluation. If this occurs, the final grade is 0. Use the appropriate flag.  \n- You should not need to edit any files except the configuration file, if it exists. If editing a file is necessary, explain the reasons to the evaluated student and ensure mutual agreement.  \n- Verify the absence of **memory leaks.** All memory allocated on the heap must be properly freed before the program ends.  \n- You may use tools like leaks, **valgrind,** or **e_fence** to check for memory leaks. If memory leaks are found, tick the appropriate flag.",
        "FR": "# Directives\n- N'évaluez que le travail soumis au **dépôt Git** de l'étudiant ou du groupe évalué.\n- Vérifiez que le **dépôt Git** appartient bien à l'étudiant (aux étudiants) et que le projet est bien celui attendu. Assurez-vous que **git clone** est utilisé dans un dossier vide.\n- Vérifiez attentivement qu'aucun alias malveillant n'est utilisé pour tromper l'évaluateur en lui faisant évaluer un contenu non officiel.\n- Le cas échéant, examinez tous les **scripts** utilisés pour les tests ou l'automatisation avec l'étudiant.\n- Si vous n'avez pas terminé le devoir que vous évaluez, lisez l'intégralité du sujet avant de commencer l'évaluation.\n- Utilisez les drapeaux disponibles pour signaler un dépôt vide, un programme non fonctionnel, une erreur de **Norme** ou une tricherie. Le processus d'évaluation se termine par une note finale de 0 (ou -42 en cas de tricherie). Toutefois, sauf en cas de tricherie, les étudiants sont encouragés à revoir le travail ensemble afin d'identifier les erreurs à éviter à l'avenir.\n- N'oubliez pas qu'aucun **segfault** ou autre arrêt inattendu du programme ne sera toléré pendant l'évaluation. Si cela se produit, la note finale est de 0. Utilisez le drapeau approprié.\n- Vous ne devriez pas avoir besoin de modifier des fichiers, à l'exception du fichier de configuration, s'il existe. Si la modification d'un fichier est nécessaire, expliquez les raisons à l'étudiant évalué et assurez-vous d'un accord mutuel.\n- Vérifiez l'absence de **fuites de mémoire**. Toute la mémoire allouée sur le tas doit être correctement libérée avant la fin du programme.\n- Vous pouvez utiliser des outils tels que leaks, **valgrind** ou **e_fence** pour vérifier les fuites de mémoire. Si des fuites de mémoire sont détectées, cochez le drapeau approprié."
      },
      "attachments": [
        {
          "title": "subject_en.pdf",
          "url": "en.subject.pdf"
        }
      ],
      "cursus_id": "1",
      "updated_at": "2023-07-31T22:00:00.000Z",
      "students": 1,
      "eval_points": 3,
      "time": 30,
      "mandatorySections": [
        {
          "description": {
            "EN": "# Mandatory Part\n\n---\n\n**Error Handling**\nThis project is to be coded in C, following the Norm.\nAny crash, undefined behavior, memory leak, or norm error means 0 to the project.\nOn some slow hardware, the project might not work properly. If some tests don't work on your machine try to discuss it honestly before counting it as false.",
            "FR": "# Partie Obligatoire\n\n---\n\n**Gestion des erreurs**\nCe projet doit être codé en C, en respectant la Norme.\nTout crash, comportement indéfini, fuite de mémoire ou erreur de norme signifie 0 pour le projet.\nSur certains matériels lents, le projet peut ne pas fonctionner correctement. Si certains tests ne fonctionnent pas sur votre machine, essayez d'en discuter honnêtement avant de le considérer comme faux."
          },
          "yes_no": true,
          "separator": "border-t-[0.5px]",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "**Global variables**\nCheck if there is any global variable which is used to manage the shared resources among the Philosophers.\nIf you find such a nasty thing, the evaluation stops here. You can go on and check the code, but do not grade the exercises.",
            "FR": "**Variables globales**\nVérifiez s'il existe une variable globale utilisée pour gérer les ressources partagées entre les philosophes.\nSi vous trouvez une chose aussi désagréable, l'évaluation s'arrête ici. Vous pouvez continuer et vérifier le code, mais ne notez pas les exercices."
          },
          "yes_no": true,
          "separator": "border-t-[0.5px]",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "**philo code**\n- Ensure the code of philo complies with the following requirements and ask for explanations.\n- Check there is one thread per philosopher.\n- Check there is only one fork per philosopher.\n- Check if there is a mutex per fork and that it's used to check the fork value and/or change it.\n- Check the outputs are never mixed up.\n- Check how the death of a philosopher is verified and if there is a mutex to prevent a philosopher from dying and starting eating at the same time.",
            "FR": "**code philo**\n- Assurez-vous que le code de philo respecte les exigences suivantes et demandez des explications.\n- Vérifiez qu'il y a un thread par philosophe.\n- Vérifiez qu'il n'y a qu'une seule fourchette par philosophe.\n- Vérifiez s'il y a un mutex par fourchette et qu'il est utilisé pour vérifier la valeur de la fourchette et/ou la modifier.\n- Vérifiez que les sorties ne sont jamais mélangées.\n- Vérifiez comment la mort d'un philosophe est vérifiée et s'il existe un mutex pour empêcher un philosophe de mourir et de commencer à manger en même temps."
          },
          "yes_no": true,
          "separator": "border-t-[0.5px]",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "**philo testing**\n- Do not test with more than 200 Philosophers.\n- Do not test with time_to_die or time_to_eat or time_to_sleep set to values lower than 60 ms.\n- Test 1 800 200 200. The philosopher should not eat and should die.\n- Test 5 800 200 200. No philosopher should die.\n- Test 5 800 200 200 7. No philosopher should die and the simulation should stop when every philosopher has eaten at least 7 times.\n- Test 4 410 200 200. No philosopher should die.\n- Test 4 310 200 100. One philosopher should die.\n- Test with 2 Philosophers and check the different times: a death delayed by more than 10 ms is unacceptable.\n- Test with any values of your choice to verify all the requirements. Ensure Philosophers die at the right time, that they don't steal forks, and so forth.",
            "FR": "**tests philo**\n- Ne testez pas avec plus de 200 philosophes.\n- Ne testez pas avec time_to_die ou time_to_eat ou time_to_sleep définis sur des valeurs inférieures à 60 ms.\n- Testez 1 800 200 200. Le philosophe ne devrait pas manger et devrait mourir.\n- Testez 5 800 200 200. Aucun philosophe ne devrait mourir.\n- Testez 5 800 200 200 7. Aucun philosophe ne devrait mourir et la simulation devrait s'arrêter lorsque chaque philosophe a mangé au moins 7 fois.\n- Testez 4 410 200 200. Aucun philosophe ne devrait mourir.\n- Testez 4 310 200 100. Un philosophe devrait mourir.\n- Testez avec 2 philosophes et vérifiez les différents temps : une mort retardée de plus de 10 ms est inacceptable.\n- Testez avec les valeurs de votre choix pour vérifier toutes les exigences. Assurez-vous que les philosophes meurent au bon moment, qu'ils ne volent pas de fourchettes, etc."
          },
          "yes_no": true,
          "separator": false,
          "type": "mandatory"
        }
      ],
      "bonusSections": [
        {
          "description": {
            "EN": "# Bonus Part\n\n---\n\n**philo_bonus code**\n- Ensure the code of philo_bonus complies with the following requirements and ask for explanations.\n- Check that there is one process per philosopher and that the main process is not a philosopher.\n- Check that there are no orphan processes at the end of the execution of this program.\n- Check if there is a single semaphore that represents the number of forks.\n- Check the output is protected against multiple access. To avoid a scrambled display.\n- Check how the death of a philosopher is verified and if there is a semaphore to prevent a philosopher from dying and starting eating at the same time.",
            "FR": "# Partie Bonus\n\n---\n\n**code philo_bonus**\n- Assurez-vous que le code de philo_bonus respecte les exigences suivantes et demandez des explications.\n- Vérifiez qu'il y a un processus par philosophe et que le processus principal n'est pas un philosophe.\n- Vérifiez qu'il n'y a pas de processus orphelins à la fin de l'exécution de ce programme.\n- Vérifiez s'il existe un seul sémaphore qui représente le nombre de fourchettes.\n- Vérifiez que la sortie est protégée contre les accès multiples. Pour éviter un affichage brouillé.\n- Vérifiez comment la mort d'un philosophe est vérifiée et s'il existe un sémaphore pour empêcher un philosophe de mourir et de commencer à manger en même temps."
          },
          "separator": "border-t-[0.5px]",
          "yes_no": true,
          "type": "bonus"
        },
        {
          "description": {
            "EN": "**philo_bonus testing**\n- Do not test with more than 200 Philosophers.\n- Do not test with time_to_die or time_to_eat or time_to_sleep set to values lower than 60 ms.\n- Test 5 800 200 200. No philosopher should die.\n- Test 5 800 200 200 7. No philosopher should die and the simulation should stop when every philosopher has eaten at least 7 times.\n- Test 4 410 200 200. No philosopher should die.\n- Test 4 310 200 100. One philosopher should die.\n- Test with 2 Philosophers and check the different times: a death delayed by more than 10 ms is unacceptable.\n- Test with any values of your choice to verify all the requirements. Ensure Philosophers die at the right time, that they don't steal forks, and so forth.",
            "FR": "**tests philo_bonus**\n- Ne testez pas avec plus de 200 philosophes.\n- Ne testez pas avec time_to_die ou time_to_eat ou time_to_sleep définis sur des valeurs inférieures à 60 ms.\n- Testez 5 800 200 200. Aucun philosophe ne devrait mourir.\n- Testez 5 800 200 200 7. Aucun philosophe ne devrait mourir et la simulation devrait s'arrêter lorsque chaque philosophe a mangé au moins 7 fois.\n- Testez 4 410 200 200. Aucun philosophe ne devrait mourir.\n- Testez 4 310 200 100. Un philosophe devrait mourir.\n- Testez avec 2 philosophes et vérifiez les différents temps : une mort retardée de plus de 10 ms est inacceptable.\n- Testez avec les valeurs de votre choix pour vérifier toutes les exigences. Assurez-vous que les philosophes meurent au bon moment, qu'ils ne volent pas de fourchettes, etc."
          },
          "separator": false,
          "yes_no": true,
          "type": "bonus"
        }
      ],
      "gradingOptions": [
        {
          "ok": true,
          "outstanding": true,
          "empty_work": true,
          "incomplete_work": true,
          "invalid_compilation": true,
          "norme": true,
          "cheat": true,
          "crash": true,
          "concerning_situations": true,
          "leaks": true,
          "forbidden_functions": true,
          "cannot_support": false
        }
      ],
      "languages": [
        "EN",
        "FR"
      ],
      "language": "EN"
    }
  ],
  "message": "Sheet created successfully"
}