{
  "success": true,
  "data": [
    {
      "project_title": "CPP04",
      "students": 1,
      "milestone": 5,
      "hours": 12,
      "countHour" : true,
      "finish": true,
      "eval_points": 3,
      "time": 30,
      "id": 20,
      "introduction": {
        "EN": "# Introduction\n- Remain polite, courteous, respectful and constructive throughout the evaluation process. The well-being of the community depends on it.\n- Identify with the student or group whose work is evaluated the possible dysfunctions in their project. Take the time to discuss and debate the problems that may have been identified.\n- You must consider that there might be some differences in how your peers might have understood the project's instructions and the scope of its functionalities. Always keep an open mind and grade them as honestly as possible. The pedagogy is useful only and only if the peer-evaluation is done seriously.",
        "FR": "# Introduction\n- Restez poli, courtois, respectueux et constructif tout au long du processus d'évaluation. Le bien-être de la communauté en dépend.\n- Identifiez avec l'étudiant ou le groupe dont le travail est évalué les dysfonctionnements possibles dans leur projet. Prenez le temps de discuter et de débattre des problèmes qui ont pu être identifiés.\n- Vous devez considérer qu'il peut y avoir des différences dans la façon dont vos pairs ont compris les instructions du projet et la portée de ses fonctionnalités. Gardez toujours l'esprit ouvert et notez-les aussi honnêtement que possible. La pédagogie n'est utile que si l'évaluation par les pairs est faite sérieusement."
      },
      "guidelines": {
        "EN": "# Guidelines\n- Only grade the work that was turned in the Git repository of the evaluated student or group.\n- Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.\n- Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.\n- To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).\n- If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.\n- Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.\n- You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.\n- You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag.",
        "FR": "# Directives\n- Ne notez que le travail qui a été remis dans le dépôt Git de l'étudiant ou du groupe évalué.\n- Vérifiez que le dépôt Git appartient bien à l'étudiant (aux étudiants). Assurez-vous que le projet est bien celui attendu. Vérifiez également que 'git clone' est utilisé dans un dossier vide.\n- Vérifiez attentivement qu'aucun alias malveillant n'a été utilisé pour vous tromper et vous faire évaluer quelque chose qui n'est pas le contenu du dépôt officiel.\n- Pour éviter toute surprise et le cas échéant, examinez ensemble tous les scripts utilisés pour faciliter la notation (scripts de test ou d'automatisation).\n- Si vous n'avez pas terminé le devoir que vous allez évaluer, vous devez lire l'intégralité du sujet avant de commencer le processus d'évaluation.\n- Utilisez les drapeaux disponibles pour signaler un dépôt vide, un programme non fonctionnel, une erreur de Norme, une tricherie, etc. Dans ces cas, le processus d'évaluation se termine et la note finale est de 0, ou -42 en cas de tricherie. Cependant, à l'exception de la tricherie, les étudiants sont fortement encouragés à examiner ensemble le travail qui a été remis, afin d'identifier les erreurs qui ne devraient pas être répétées à l'avenir.\n- Vous ne devriez jamais avoir à modifier un fichier, sauf le fichier de configuration s'il existe. Si vous voulez modifier un fichier, prenez le temps d'expliquer les raisons à l'étudiant évalué et assurez-vous que vous êtes tous les deux d'accord.\n- Vous devez également vérifier l'absence de fuites de mémoire. Toute mémoire allouée sur le tas doit être correctement libérée avant la fin de l'exécution. Vous êtes autorisé à utiliser n'importe quel outil disponible sur l'ordinateur, tel que leaks, valgrind ou e_fence. En cas de fuites de mémoire, cochez le drapeau approprié."
      },
     "attachments": [
        {
          "title": "subject_en.pdf",
          "url": "en.subject.pdf"
        },
        {
          "title": "subject_fr.pdf",
          "url": "fr.subject.pdf"
        }
      ],
      "mandatorySections": [
        {
          "description": {
            "EN": "# Preliminary tests\n*If a cheating case is suspected, the grading and evaluation end immediately. To report it, select the \"Cheat\" flag. Be careful to use it calmly, carefully, and with discernment.*\n\n---\n\n**Prerequisites**\nThe code must compile with c++ and the flags -Wall -Wextra -Werror.\nAs a reminder, this project must follow the C++98 standard. Therefore, C++11 functions (or other standards) and containers are NOT expected.\n\nDo not grade the exercise if you find:\n- A function implemented in a header file (except for template functions).\n- A Makefile compiling without the requested flags and/or with something other than c++.\n\nSelect the \"Forbidden Function\" flag if you encounter:\n- The use of a \"C\" function (*alloc, *printf, free).\n- The use of a forbidden function in the project.\n- The use of \"using namespace <ns_name>\" or the keyword \"friend\".\n- The use of an external library, or features specific to versions later than C++98.",
            "FR": "# Tests préliminaires\n*Si un cas de tricherie est suspecté, la notation et l'évaluation se terminent immédiatement. Pour le signaler, sélectionnez le drapeau \"Triche\". Soyez prudent et utilisez-le calmement, attentivement et avec discernement.*\n\n---\n\n**Prérequis**\nLe code doit compiler avec c++ et les drapeaux -Wall -Wextra -Werror.\nPour rappel, ce projet doit suivre la norme C++98. Par conséquent, les fonctions C++11 (ou autres normes) et les conteneurs ne sont PAS attendus.\n\nNe notez pas l'exercice si vous trouvez :\n- Une fonction implémentée dans un fichier d'en-tête (sauf pour les fonctions de modèle).\n- Un Makefile compilant sans les drapeaux demandés et/ou avec autre chose que c++.\n\nSélectionnez le drapeau \"Fonction interdite\" si vous rencontrez :\n- L'utilisation d'une fonction \"C\" (*alloc, *printf, free).\n- L'utilisation d'une fonction interdite dans le projet.\n- L'utilisation de \"using namespace <ns_name>\" ou du mot-clé \"friend\".\n- L'utilisation d'une bibliothèque externe, ou de fonctionnalités spécifiques aux versions ultérieures à C++98."
          },
          "yes_no": true,
          "separator": "border-t-4",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "# Exercise 00: Polymorphism\n*As usual, there has to be enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.*\n\n---\n\n**First check**\nThere is an Animal class that has one attribute:\nOne string called type.\nYou must be able to instantiate and use this clas",
            "FR": "# Exercice 00 : Polymorphisme\n*Comme d'habitude, il doit y avoir suffisamment de tests pour prouver que le programme fonctionne comme prévu. S'il n'y en a pas, ne notez pas cet exercice. Si une classe non-interface n'est pas sous forme de classe canonique orthodoxe, ne notez pas cet exercice.*\n\n---\n\n**Premier contrôle**\nIl existe une classe Animal qui possède un attribut :\nUne chaîne de caractères appelée type.\nVous devez être capable d'instancier et d'utiliser cette classe."
          },
          "yes_no": true,
          "separator": "border-t-[0.5px]",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "**Inheritance**\nThey are at least two classes that inherit from Animal: Cat and Dog.\nThe constructor and destructor outputs must be clear.\nAsk the student about constructor and destructor orders.",
            "FR": "**Héritage**\nIl existe au moins deux classes qui héritent d'Animal : Cat et Dog.\nLes sorties du constructeur et du destructeur doivent être claires.\nInterrogez l'étudiant sur l'ordre des constructeurs et des destructeurs."
          },
          "yes_no": true,
          "separator": "border-t-[0.5px]",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "**Easy derived class**\nThe attribute type is set to the appropriate value at creation for every animal. Cat must have \"Cat\" and Dog must have \"Dog\".",
            "FR": "**Classe dérivée facile**\nL'attribut type est défini à la valeur appropriée lors de la création pour chaque animal. Cat doit avoir \"Cat\" et Dog doit avoir \"Dog\"."
          },
          "yes_no": true,
          "separator": "border-t-[0.5px]",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "**Animal**\nUsing makeSound() function always called the appropriate makeSound() function. makeSound() should be virtual! Verify it in the code. virtual void makeSound() const;\nThe return value is not important but virtual keyword is mandatory.\n\nThere should be an example with a WrongAnimal and WrongCat that don't use the virtual keyword (see subject).\nThe WrongCat must output the WrongCat makeSound() only when used as a wrongCat.",
            "FR": "**Animal**\nL'utilisation de la fonction makeSound() appelle toujours la fonction makeSound() appropriée. makeSound() doit être virtuel ! Vérifiez-le dans le code. virtual void makeSound() const ;\nLa valeur de retour n'est pas importante mais le mot-clé virtual est obligatoire.\n\nIl devrait y avoir un exemple avec un WrongAnimal et un WrongCat qui n'utilisent pas le mot-clé virtual (voir sujet).\nLe WrongCat ne doit sortir le WrongCat makeSound() que lorsqu'il est utilisé comme un wrongCat."
          },
          "yes_no": true,
          "separator": "border-t-4",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "# Exercise 01: I do not want to set the world on fire\n*As usual, there has to be enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.*\n\n---\n\n**Concrete Animal**\nThere is a new class called Brain.\nCat and Dog have the required private Brain attribute.\nThe Brain attribute should not be inside the Animal class.\nThe Brain class has specific outputs upon creation and deletion.",
            "FR": "# Exercice 01 : Je ne veux pas mettre le feu au monde\n*Comme d'habitude, il doit y avoir suffisamment de tests pour prouver que le programme fonctionne comme prévu. S'il n'y en a pas, ne notez pas cet exercice. Si une classe non-interface n'est pas sous forme de classe canonique orthodoxe, ne notez pas cet exercice.*\n\n---\n\n**Animal concret**\nIl existe une nouvelle classe appelée Brain.\nCat et Dog ont l'attribut Brain privé requis.\nL'attribut Brain ne doit pas être à l'intérieur de la classe Animal.\nLa classe Brain a des sorties spécifiques lors de la création et de la suppression."
          },
          "yes_no": true,
          "separator": "border-t-[0.5px]",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "**Concrete Brain**\nThe copy a Cat or a Dog should be a deep copy.\nTest something like:\n`Dog basic;\n{\nDog tmp = basic;\n}`\n\nIf the copy is shallow, tmp and basic will use the same Brain and the Brain will get deleted with tmp at the end of the scope.\nThe copy constructor should do a deep copy too.\nThat's why a clean implementation in orthodox canonical form will save you from hours of pain.",
            "FR": "**Cerveau concret**\nLa copie d'un Cat ou d'un Dog doit être une copie profonde.\nTestez quelque chose comme :\n`Dog basic ;\n{\nDog tmp = basic ;\n}`\n\nSi la copie est superficielle, tmp et basic utiliseront le même Brain et le Brain sera supprimé avec tmp à la fin de la portée.\nLe constructeur de copie doit également effectuer une copie profonde.\nC'est pourquoi une implémentation propre sous forme canonique orthodoxe vous évitera des heures de souffrance."
          },
          "yes_no": true,
          "separator": "border-t-[0.5px]",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "**Destruction chaining**\nThe destructors in Animal must be virtual.\nAsk an explanation of what will happen without the virtual keyword over Animal destructor.\nTest it.",
            "FR": "**Chaîne de destruction**\nLes destructeurs d'Animal doivent être virtuels.\nDemandez une explication de ce qui se passera sans le mot-clé virtual sur le destructeur Animal.\nTestez-le."
          },
          "yes_no": true,
          "separator": "border-t-[0.5px]",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "**Assignment and copy**\nThe copy and assignment behaviors of the Cat and Dog are like the subject requires.\nDeep copy means you need to create a new Brain for the Cat or Dog.\nCheck that the canonical form is really implemented (i.e. no empty copy assignment operators and so forth). Nothing should be public for no reason. Moreover, this code is very simple so it needs to be clean!",
            "FR": "**Affectation et copie**\nLes comportements de copie et d'affectation du Cat et du Dog sont conformes aux exigences du sujet.\nCopie profonde signifie que vous devez créer un nouveau Brain pour le Cat ou le Dog.\nVérifiez que la forme canonique est réellement implémentée (c'est-à-dire pas d'opérateurs de copie d'affectation vides, etc.). Rien ne doit être public sans raison. De plus, ce code est très simple, il doit donc être propre !"
          },
          "yes_no": true,
          "separator": "border-t-4",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "# Exercise 02: Abstract class\n*As usual, there has to be enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.*\n\n---\n\n**Abstract class**\nThere is an Animal class exactly like the one in the subject.\nThe Animal::makeSound is a pure virtual function.\nIt should look like : virtual void makeSound() const = 0;\nThe \"= 0\" part is mandatory.\nYou should not be able to instantiate an Animal.\nAnimal test; //should give you a compile error about the class being abstract",
            "FR": "# Exercice 02 : Classe abstraite\n*Comme d'habitude, il doit y avoir suffisamment de tests pour prouver que le programme fonctionne comme prévu. S'il n'y en a pas, ne notez pas cet exercice. Si une classe non-interface n'est pas sous forme de classe canonique orthodoxe, ne notez pas cet exercice.*\n\n---\n\n**Classe abstraite**\nIl existe une classe Animal exactement comme celle du sujet.\nAnimal::makeSound est une fonction virtuelle pure.\nElle devrait ressembler à ceci : virtual void makeSound() const = 0 ;\nLa partie \"= 0\" est obligatoire.\nVous ne devriez pas pouvoir instancier un Animal.\nAnimal test ; //devrait vous donner une erreur de compilation indiquant que la classe est abstraite"
          },
          "yes_no": true,
          "separator": "border-t-[0.5px]",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "**Concrete Animal**\nClass Cat and Dog are still present and work exactly like in ex01.",
            "FR": "**Animal concret**\nLes classes Cat et Dog sont toujours présentes et fonctionnent exactement comme dans ex01."
          },
          "yes_no": true,
          "separator": "border-t-4",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "# Exercise 03: Interface and recap\n*As usual, there has to be enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.*\n\n---\n\n**Interfaces**\nThere are ICharacter and IMateriaSource interfaces that are exactly like\nrequired in the subject.\n\n",
            "FR": "# Exercice 03 : Interface et récapitulatif\n*Comme d'habitude, il doit y avoir suffisamment de tests pour prouver que le programme fonctionne comme prévu. S'il n'y en a pas, ne notez pas cet exercice. Si une classe non-interface n'est pas sous forme de classe canonique orthodoxe, ne notez pas cet exercice.*\n\n---\n\n**Interfaces**\nIl existe des interfaces ICharacter et IMateriaSource qui sont exactement comme\nrequis dans le sujet."
          },
          "yes_no": true,
          "separator": "border-t-[0.5px]",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "**MateriaSource**\nThe MateriaSource class is present and implements IMateriaSource. The member functions work as intended.",
            "FR": "**MateriaSource**\nLa classe MateriaSource est présente et implémente IMateriaSource. Les fonctions membres fonctionnent comme prévu."
          },
          "yes_no": true,
          "separator": "border-t-[0.5px]",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "**Concrete Materia**\nThere are concrete Ice and Cure classes that inherit from AMateria. Their clone() method is correctly implemented. Their outputs are correct.\nThe AMateria class is still abstract (clone() is a pure function). virtual ~AMateria() is present.\nAMateria contains a protected string attribute to store the type.",
            "FR": "**Materia concrète**\nIl existe des classes concrètes Ice et Cure qui héritent de AMateria. Leur méthode clone() est correctement implémentée. Leurs sorties sont correctes.\nLa classe AMateria est toujours abstraite (clone() est une fonction pure). virtual ~AMateria() est présent.\nAMateria contient un attribut de chaîne protégé pour stocker le type."
          },
          "yes_no": true,
          "separator": "border-t-[0.5px]",
          "type": "mandatory"
        },
        {
          "description": {
            "EN": "**Character**\nThe Character class is present and implements ICharacter. It has an inventory of 4 Materias maximum.\nThe member functions are implemented as the subject requires.\nThe copy and assignment of a Character are implemented as required (deep copy).",
            "FR": "**Personnage**\nLa classe Character est présente et implémente ICharacter. Il a un inventaire de 4 Materias maximum.\nLes fonctions membres sont implémentées comme le sujet l'exige.\nLa copie et l'affectation d'un Character sont implémentées comme requis (copie profonde)."
          },
          "yes_no": true,
          "separator": false,
          "type": "mandatory"
        }
      ],
      "bonusSections": [],
      "cursus_id": "1",
      "updated_at": "2023-12-27T23:00:00.000Z",
      "gradingOptions": [
        {
          "ok": true,
          "outstanding": true,
          "empty_work": true,
          "incomplete_work": true,
          "invalid_compilation": true,
          "norme": true,
          "cheat": true,
          "crash": true,
          "concerning_situations": true,
          "leaks": true,
          "forbidden_functions": true,
          "cannot_support": false
        }
      ],
      "languages": [
        "EN",
        "FR"
      ],
      "language": "EN"
    }
  ],
  "message": "Sheet created successfully"
}